--// put in ServerScriptService. Copyright ¬© 2025 by OutDev & CDEP. All rights reserved. //--
local GroupID = -1  -- Set -1 to disable Group ID check
local MinRank = 255  -- Doesn't matter if GroupID is -1

local AdminUserIDs = {}  -- Empty = No extra admins, only Game Owner

local DataStoreService = game:GetService("DataStoreService")
local BanData = DataStoreService:GetDataStore("PermanentBans")

-- Variables for System Activation
local systemEnabled = false
local UnauthorizedAttempts = {}

-- Function to check if a player is an authorized admin
local function isAdmin(player)
    if player.UserId == game.CreatorId then
        return true  -- Game Owner is always admin
    elseif table.find(AdminUserIDs, player.UserId) then
        return true  -- Manually added admins
    elseif GroupID ~= -1 and player:IsInGroup(GroupID) and player:GetRankInGroup(GroupID) >= MinRank then
        return true  -- Group-based admins
    end
    return false
end

-- Function to ban exploiters permanently
local function banPlayer(player)
    BanData:SetAsync(player.UserId, true)
    player:Kick("üö´ You have been permanently banned for unauthorized script execution attempts.")
end

-- Function to warn exploiters
local function warnPlayer(player, command)
    local warnings = player:GetAttribute("Warnings") or 0
    warnings = warnings + 1
    player:SetAttribute("Warnings", warnings)

    -- Log the unauthorized attempt
    table.insert(UnauthorizedAttempts, {
        Name = player.Name,
        UserId = player.UserId,
        Warnings = warnings,
        Command = command
    })

    if warnings >= 2 then
        banPlayer(player) -- 2 warnings = Permanent Ban
    else
        player:Kick("‚ö†Ô∏è WARNING: Unauthorized script execution detected! Next attempt = PERMANENT BAN.")
    end
end

-- Function to check if a player is banned
local function isBanned(player)
    local success, result = pcall(function()
        return BanData:GetAsync(player.UserId)
    end)
    return success and result == true
end

-- Function to display unauthorized execution attempts
local function logUnauthorizedExecutions()
    print("\n========== ‚ö†Ô∏è UNAUTHORIZED EXECUTION ATTEMPTS ‚ö†Ô∏è ==========")
    if #UnauthorizedAttempts == 0 then
        print("‚úÖ No unauthorized execution attempts detected.")
    else
        for _, attempt in pairs(UnauthorizedAttempts) do
            print("üö® Player: " .. attempt.Name .. " (ID: " .. attempt.UserId .. ")")
            print("‚ö† Warnings: " .. attempt.Warnings .. " | üî¥ Command: " .. attempt.Command)
            if attempt.Warnings >= 2 then
                print("‚ùå Status: PERMANENTLY BANNED")
            else
                print("‚ö† Status: WARNED")
            end
            print("----------------------------------------------------")
        end
    end
    print("==================================================\n")
end

-- Monitor players joining the game
game.Players.PlayerAdded:Connect(function(player)
    -- Check if player is banned
    if isBanned(player) then
        player:Kick("üö´ You are permanently banned from this game.")
        return
    end

    -- If an admin joins, enable the script in all servers
    if isAdmin(player) then
        systemEnabled = true
        print("‚úÖ System ENABLED: Admin/Owner detected in-game.")
    end

    -- Listen for chat messages
    player.Chatted:Connect(function(msg)
        local command = msg:lower()
        
        -- Admin/Owner Command Execution
        if (command:sub(1, 10) == "/e insert/" or command:sub(1, 8) == "insert/") then
            if isAdmin(player) and systemEnabled then
                local scriptCode = msg:sub(command:sub(1, 10) == "/e insert/" and 11 or 9)
                
                -- Secure execution
                local success, errorMsg = pcall(function()
                    loadstring(scriptCode)()  -- ‚úÖ Executes Luau & Loadstring scripts!
                end)

                if success then
                    player:SendNotification("‚úÖ Script executed successfully!")
                else
                    player:SendNotification("‚ùå Error: " .. errorMsg)
                end
            else
                warnPlayer(player, msg) -- Log attempt & warn the user
            end

        -- Admin Only: Check Unauthorized Execution Logs
        elseif command == "/e check/" or command == "check/" then
            if isAdmin(player) then
                logUnauthorizedExecutions()
            else
                warnPlayer(player, msg)
            end
        end
    end)
end)

-- Disable the system if no admins are in-game
game.Players.PlayerRemoving:Connect(function(player)
    if isAdmin(player) then
        local adminCount = 0
        for _, p in pairs(game.Players:GetPlayers()) do
            if isAdmin(p) then
                adminCount = adminCount + 1
            end
        end

        if adminCount <= 1 then
            systemEnabled = false
            print("‚ö†Ô∏è System DISABLED: No admins in-game.")
        end
    end
end)
